chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

myproxy = ["123.123.123.123", 22, "root", "proxypasswordhere", "ssh"]
// ^^ this must be filled with proxy ssh credentials.

for param in params
    if param == "--help" or param == "-h" then
        print("Connect 4 Game.")
        print("Usage: " + program_path.split("/")[-1] + " [--ip=server-ip] [--port=server-port] [--user=server-user] [--passwd=server-password] [--service=server-service]")
        exit
    end if
    if param[:5] == "--ip=" then
        myproxy[0] = param[5:]
    else if param[:7] == "--port=" then
        myproxy[1] = floor(param[7:].val)
    else if param[:7] == "--user=" then
        myproxy[2] = param[7:]
    else if param[:9] == "--passwd=" then
        myproxy[3] = param[9:]
    else if param[:10] == "--service=" then
        myproxy[4] = param[10:]
    else
        exit("Unknown parameter '" + param + "'; use --help for help.")
    end if
end for

MP_Host = function()
    clear_screen
	if not game_shell then GetGameShell
    if typeof(game_shell) != "shell" then
        print(char(10) + "            Unable to connect to game server!")
        user_input(char(10) + "            Press enter to continue...")
        MP_Header
        break
    end if
	games = game_shell.host_computer.File("/Games")
	if not games then
		out = game_shell.host_computer.create_folder("/", "Games")
		if typeof(out) == "string" then
			print("<indent=5%>Error: " + out)
            user_input(char(10) + "<indent=5%>Press enter to continue...")
			MP_Header
			break
		end if
		games = game_shell.host_computer.File("/Games")
		if not games then
			print("<indent=5%>Error: Folder /Games not found on game server")
            user_input(char(10) + "<indent=5%>Press enter to continue...")
			MP_Header
			break
		end if
	end if
	connectfourgame = game_shell.host_computer.File("/Games/Connect4")
	if not connectfourgame then
		out2 = game_shell.host_computer.create_folder("/Games", "Connect4")
		if typeof(out2) == "string" then
			print("<indent=5%>Error: " + out2)
            user_input(char(10) + "<indent=5%>Press enter to continue...")
			MP_Header
			break
		end if
		connectfourgame = game_shell.host_computer.File("/Games/Connect4")
		if not connectfourgame then
			print("<indent=5%>Error: Folder /Games/Connect4 not found on game server")
            user_input(char(10) + "<indent=5%>Press enter to continue...")
			MP_Header
			break
		end if
	end if
	while true
		exists = false
		newfile = ""
		for _ in range(1,5)
			x = round(rnd * 9)
			newfile = newfile + x
		end for
		if connectfourgame.get_files.len == 0 then break
		for file in connectfourgame.get_files
			if file.name == newfile then exists = true
		end for
		if exists == false then break
	end while
	
    print(char(10) + char(10) + "            Your game ID:  <size=30><color=white>"+newfile)
	timestop = user_input(char(10) + "            Set timeout timer or press enter for 30sec: ").to_int
    if typeof(timestop) != "number" then timestop = 30
    if timestop < 30 then
        print("            Timeout timer too low. Setting automaticly to default (30 seconds)")
        timestop = 30
    end if
    while true
		nameOK = true
		myname = user_input(char(10) + "            Enter your name: " )
		for c in myname
		    if chars.indexOf(c) == null then nameOK = false
		end for
		if nameOK == false then
			print("            Please use only alphanumeric characters in name")
		else
			break
		end if
	end while
	out3 = game_shell.host_computer.touch("/Games/Connect4", newfile)
	if typeof(out3) == "string" then
		print("<indent=5%>Error: " + out3)
        user_input(char(10) + "<indent=5%>Press enter to continue...")
		MP_Header
		break
	end if
    
    thisgame = game_shell.host_computer.File("/Games/Connect4/" + newfile)
	thisgame.set_content(myname + " -- " + current_date)

	print(char(10) + "            Waiting oponent to join match...")
	print(char(10) + "            (timeout after " + timestop + " seconds)")
	timewait = 0
    timeout = false
	while thisgame.get_content.split(char(10)).len != 2
		if thisgame.get_content.split(char(10)).len == 2 then break
		if timewait == timestop then
			print(char(10) + char(10) + "            <color=#FF4500>TIMEOUT! Oponent not connected!")
            thisgame.set_content(thisgame.get_content + char(10) + "EXPIRED")
			user_input(char(10) + "            Press enter to return to main menu...")
            timeout = true
			break
		end if
		wait(1)
		timewait = timewait + 1
	end while
	if timeout then
        Header
        break
    end if
    print(char(10) + "            Starting game...")
    print("            Game hosted on:  " + thisgame.get_content.split(char(10))[0].split(" -- ")[1])
	wait(3.7)
						
	CreateBoard
	// Initialize the current player
	current_player = PLAYER_ONE
						
	// Setting the player names
	player_one_name = myname
	player_two_name = thisgame.get_content.split(char(10))[1].split(" -- ")[0]
	current_player_name = myname
						
	// Setting other variables
	lastlength = thisgame.get_content.split(char(10)).len
						
	// Warnings
	warn_incorrect = false
	warn_full = false
						
	// Play the game
	while true
		print_board()
		// Ask the current player to make a move
		if warn_incorrect then
			print(char(10) + "Invalid move, try again.")
			warn_incorrect= false
		end if
		if warn_full then
			print(char(10) + "Column is full, try again")
			warn_full = false
		end if
							
		if current_player == PLAYER_ONE then
			moveit = user_input(char(10) + "<indent=5%>Player " + player_one_name + "  (" + current_player + ")  enter a column number (1-" + COLS + "): ").to_int
			// Check if the move is valid
			if typeof(moveit) != "number" or (moveit - 1) < 0 or (moveit - 1) >= COLS then
    			warn_incorrect= true
    			continue
    		end if
			col = moveit - 1
			thisgame.set_content(thisgame.get_content + char(10) + myname + " -- " + moveit)
		else
			print(char(10) + "<indent=5%>Waiting for " + player_two_name + "  (" + PLAYER_TWO + ")  to make a move...")
			while true
				if thisgame.get_content.split(char(10)).len > lastlength then break
                wait(0.1)
			end while
			moveit = thisgame.get_content.split(char(10))[-1].split(" -- ")[1].to_int
			col = moveit - 1
		end if
							
    	// Find the lowest empty row in the selected column
    	row = null
    	for i in range(ROWS- 1 , 0)
    		if board[i][col] == " " then
    			row = i
    			break
    		end if
    	end for
    
    	if row == null then
    		warn_full = true
    		continue
    	end if
							
		lastlength = thisgame.get_content.split(char(10)).len
						
		// Place the player's symbol in the selected row and column
    	board[row][col] = current_player
		is_board_full = true
		for i in range(0, ROWS - 1)
			for j in range(0, COLS - 1)
				if board[i][j] == " " then
					is_board_full = false
					break
				end if
			end for
		end for
							
		// Check if the game is over
    	if check_winner(current_player) then
    		print_board()
			last_player = thisgame.get_content.split(char(10))[-1].split(" -- ")[0]
			wait(0.01)
    		print(char(10) + "<b><indent=5%><size=20>GAME OVER! Player " + last_player + " with  </b>" + current_player + "  <b>wins!")
			user_input(char(10) + "<indent=5%>Press enter to continue...")
			break
    	else if is_board_full then
			print_board()
			wait(0.01)
    		print(char(10) + "<indent=5%><size=20>Tie game!")
			user_input(char(10) + "<indent=5%>Press enter to continue...")
			break
    	end if
    						
		// Switch to the other player
		if current_player == PLAYER_ONE then
			current_player = PLAYER_TWO
		else
			current_player = PLAYER_ONE
		end if							
	end while	
	MP_Header
end function

MP_Join = function(id=null)
    clear_screen
	if not game_shell then GetGameShell
    if typeof(game_shell) != "shell" then
        print( char(10) + "            Unable to connect to game server!")
        user_input(char(10) + "            Press enter to continue...")
        MP_Header
        break
    end if
	if id == null then print(char(10) + "            Enter <color=#00FF00>e</color> to return to menu" + char(10))
    MPJoinbreak = false
    while true
		if id then
			gameid = id
		else
    		gameid = user_input("            Enter game ID number: <color=white>" )
        	if gameid.lower == "e" then
            	MPJoinbreak = true
                MP_Header
            	return
			end if
        end if
		thisgame = game_shell.host_computer.File("/Games/Connect4/" + gameid)
		if not thisgame then
			print("            Error: wrong game ID")
		else
            if thisgame.get_content.split(char(10)).len != 1 then
                print("            Error: game ID expired")
                MPJoinbreak = true
            else
                break
            end if
		end if
	end while
	if MPJoinbreak then
        Header
        break
    end if
    while true
		nameOK = true
		myname = user_input(char(10) + "            Enter your name: " )
		for c in myname
			if chars.indexOf(c) == null then nameOK = false
		end for
		if nameOK == false then
			print("            Please use only alphanumeric characters in name")
		else
			break
		end if
	end while
	
    
    thisgame.set_content(thisgame.get_content + char(10) + myname + " -- PLAYER_TWO")
	print(char(10) + "            Starting game...")
    print("            Game hosted on:  " + thisgame.get_content.split(char(10))[0].split(" -- ")[1])
	wait(4)
					
	CreateBoard
	// Initialize the current player
	current_player = PLAYER_ONE
					
	// Setting the player names
	player_one_name = thisgame.get_content.split(char(10))[0].split(" -- ")[0]
	player_two_name = myname
	current_player_name = player_one_name
				
	// Setting other variables
	lastlength = thisgame.get_content.split(char(10)).len
						
	// Warnings
	warn_incorrect = false
	warn_full = false
						
	// Play the game
	while true
		print_board()
		// Ask the current player to make a move
		if warn_incorrect then
			print(char(10) + "Invalid move, try again.")
			warn_incorrect= false
		end if
		if warn_full then
			print(char(10) + "Column is full, try again")
			warn_full = false
		end if
		if current_player == PLAYER_ONE then
			print(char(10) + "<indent=5%>Waiting for " + player_one_name + "  (" + PLAYER_ONE + ")  to make a move...")
			while true
				if thisgame.get_content.split(char(10)).len > lastlength then break
                wait(0.1)
			end while
			moveit = thisgame.get_content.split(char(10))[-1].split(" -- ")[1].to_int
			col = moveit - 1
		else
			moveit = user_input(char(10) + "<indent=5%>Player " + player_two_name + "  (" + current_player + ")  enter a column number (1-" + COLS + "): ").to_int
			// Check if the move is valid
			if typeof(moveit) != "number" or (moveit - 1) < 0 or (moveit - 1) >= COLS then
				warn_incorrect= true
				continue
			end if
			col = moveit - 1
			thisgame.set_content(thisgame.get_content + char(10) + myname + " -- " + moveit)
		end if
							
		lastlength = thisgame.get_content.split(char(10)).len
							
		// Find the lowest empty row in the selected column
		row = null
		for i in range(ROWS- 1 , 0)
			if board[i][col] == " " then
				row = i
				break
			end if
		end for
    
		if row == null then
			warn_full = true
			continue
		end if
							
		// Place the player's symbol in the selected row and column
		board[row][col] = current_player
		is_board_full = true
		for i in range(0, ROWS - 1)
			for j in range(0, COLS - 1)
				if board[i][j] == " " then
					is_board_full = false
					break
				end if
			end for
		end for
						
		// Check if the game is over
		if check_winner(current_player) then
			print_board()
    		last_player = thisgame.get_content.split(char(10))[-1].split(" -- ")[0]
			wait(0.01)
			print(char(10) + "<b><indent=5%><size=20>GAME OVER! Player " + last_player + " with  </b>" + current_player + "  <b>wins!")
			user_input(char(10) + "<indent=5%>Press enter to continue...")
			break
		else if is_board_full then
			print_board()
			wait(0.01)
			print(char(10) + "<indent=5%><size=20>Tie game!")
			user_input(char(10) + "<indent=5%>Press enter to continue...")
			break
		end if
						
		// Switch to the other player
		if current_player == PLAYER_ONE then
			current_player = PLAYER_TWO
		else
			current_player = PLAYER_ONE
		end if	
	end while
	MP_Header
end function

CheckGames = function()
    connectfourgame = game_shell.host_computer.File("/Games/Connect4")
    while true
        clear_screen
        print(char(10) + char(10) + "            Searching for availible games to join...")
        wait(2)
        globals.listgames = []
        globals.listgametime = []

        for game in connectfourgame.get_files
            if game.is_binary then continue
            if game.get_content.split(char(10)).len != 1 then continue
            if game.get_content.split(char(10))[0].split(" -- ").len != 2 then continue
            globals.listgames.push(game.name)
            globals.listgametime.push(game.get_content.split(char(10))[0])
        end for

        if listgames.len == 0 then
            continue
        else
            print(char(10) + "            List of availible game(s):" + char(10))
            output = ">>>>>>>>>>>><color=#A0A0A0>#</color> <color=#A0A0A0>GAME_ID</color> <color=#A0A0A0>HOST_NAME</color> <color=#A0A0A0>ACTIVE</color>"
            for i in range(0, listgames.len - 1)
                host_name = listgametime[i].split(" -- ")[0].trim
                host_date = listgametime[i].split(" -- ")[1].trim
                time_dif = calculate_time_difference(host_date, current_date)
                gt_dif = time_dif * 4.21395
                if gt_dif < 61 then time_color = "#98FB98"
                if gt_dif > 60 and time_dif < 181 then time_color = "#FFFF33"
                if gt_dif > 180 then time_color = "#CC0000"
                active = convert_seconds(time_dif * 60)
                active = active.replace(" ", "=")
                output = output + char(10) + ">>>>>>>>>>>><color=#66FFFF>" + (i+1) + "</color> <color=#FFFFFF>" + listgames[i] + "</color> <color=#99FF33>" + host_name + "</color> <color=" + time_color + ">" + active + "</color>"
            end for
            formatted = format_columns(output)
            formatted = formatted.replace("=", " ")
            formatted = formatted.replace(">>>>>>>>>>>>", "            ")
            print(formatted)
            break
        end if
    end while
end function

game_shell = null

GetGameShell = function()
	globals.game_shell = get_shell.connect_service(myproxy[0], myproxy[1], myproxy[2], myproxy[3], myproxy[4])
end function

GameServer = function
    if not get_router(myproxy[0]) then return "<color=red>Server not found</color>"
    whois_info = whois(myproxy[0])
    whois_info = whois_info.split(char(10))[0].split(": ")[1].split(".")[0]
    s_name = whois_info.upper[0]+whois_info.lower[1:]
    return "<color=green>" + s_name
end function

calculate_time_difference = function(one, two)

	// Split date and time values
	one_parts = one.split(" - ")
	two_parts = two.split(" - ")
	
	// Extract date and time components
	one_date_parts = one_parts[0].split("/")
	one_time_parts = one_parts[1].split(":")
	two_date_parts = two_parts[0].split("/")
	two_time_parts = two_parts[1].split(":")
	
	// Convert date and time components to integers
	one_day = one_date_parts[0].to_int
	one_month = month_to_integer(one_date_parts[1])
	one_year = one_date_parts[2].to_int
	one_hour = one_time_parts[0].to_int
	one_minute = one_time_parts[1].to_int
	
	two_day = two_date_parts[0].to_int
	two_month = month_to_integer(two_date_parts[1])
	two_year = two_date_parts[2].to_int
	two_hour = two_time_parts[0].to_int
	two_minute = two_time_parts[1].to_int
	
	// Calculate time difference in minutes
	one_minutes = (one_year * 525600) + (one_month * 43800) + (one_day * 1440) + (one_hour * 60) + one_minute
	two_minutes = (two_year * 525600) + (two_month * 43800) + (two_day * 1440) + (two_hour * 60) + two_minute
	
	time_difference = two_minutes - one_minutes

	return time_difference

end function

month_to_integer = function(month)

	// Convert a month string to an integer
	if month == "Jan" then return 1
    if month == "Feb" then return 2
    if month == "Mar" then return 3
    if month == "Apr" then return 4
    if month == "May" then return 5
    if month == "Jun" then return 6
    if month == "Jul" then return 7
    if month == "Aug" then return 8
    if month == "Sep" then return 9
    if month == "Oct" then return 10
    if month == "Nov" then return 11
    if month == "Dec" then return 12

end function

modulo = function(dividend, divisor)
	quotient = floor(dividend / divisor)
	remainder = dividend - (quotient * divisor)
	return remainder
end function


convert_seconds = function(seconds)

	// Setting game seconds to real life seconds
	seconds = floor(seconds / 14.23838)
	
	minutes = floor(seconds / 60)
	seconds = modulo(seconds, 60)
	
	hours = floor(minutes / 60)
	minutes = modulo(minutes, 60)
	
	days = floor(hours / 24)
	hours = modulo(hours, 24)
	
	years = floor(days / 365)
	days = modulo(days, 365)
	
	result = ""
	
	if years > 0 then result = result + str(years) + "y "
	if days > 0 then result = result + str(days) + "d "
	if hours > 0 then result = result + str(hours) + "h "
	if minutes > 0 then result = result + str(minutes) + "m "
	if seconds >= 0 then result = result + str(seconds) + "s"
	return result

end function


// Define the size of the game board
ROWS = 6
COLS = 7

// Define the player symbols
PLAYER_ONE = "<mark=#FF0000>X</mark>" // red
PLAYER_TWO = "<mark=#FFD700>O</mark>" // yellow

// Create an empty game board
CreateBoard = function()
	globals.board = []
	for r in range(1,ROWS)
    	row = []
    	for c in range(1,COLS)
       		row.push(" ")
    	end for
    	globals.board.push(row)
	end for
end function

// Print the current state of the game board
print_board = function()
	//clear_screen
	mega = ""
	help_line = "<indent=5%><size=20>  "
	small = " "
	large = "  "
	i = 1
	stopme = false
    for row in board
        row_output = "<indent=5%><size=20>"
		line_seperator = "<indent=5%><size=20> +"
        for cell in row
            row_output = row_output + " | " + cell
			line_seperator = line_seperator + "---+"
			if not stopme then
				if i < 10 then
					help_line = help_line + " " + i + large
				else
					help_line = help_line + " " + i + small
				end if
				i = i + 1
			end if
        end for
        stopme = true
		mega = mega + char(10) +  row_output + " |" + char(10) + line_seperator
    end for
	mega = mega + char(10) + help_line
	print(mega,1)

end function

// Check if a player has won the game, 'player' is last player's coin (X or O)
check_winner = function(player)

    // Check for horizontal win
	for row in range(0, ROWS - 1)
		for col in range(0, COLS - 4)
			if board[row][col] == player then
				if board[row][col+1] == player and
					board[row][col+2] == player and
					board[row][col+3] == player then
					return true
				end if
			end if
		end for
	end for
	
	// Check for vertical win
	for row in range(0, ROWS - 4)
		for col in range(0, COLS - 1)
			if board[row][col] == player then
				if board[row+1][col] == player and
					board[row+2][col] == player and
					board[row+3][col] == player then
					return true
				end if
			end if
		end for
	end for

	// Check for diagonal win (top-left to bottom-right)
	for row in range(0, ROWS - 4)
		for col in range(0, COLS - 4)
			if board[row][col] == player then
				if board[row+1][col+1] == player and
					board[row+2][col+2] == player and
					board[row+3][col+3] == player then
					return true
				end if
			end if
		end for
	end for

	// Check for diagonal win (bottom-left to top-right)
	for row in range(2, ROWS - 1)
		for col in range(0, COLS - 4)
			if board[row][col] == player then
				if board[row-1][col+1] == player and
					board[row-2][col+2] == player and
					board[row-3][col+3] == player then
					return true
				end if
			end if
		end for
	end for
	return false
end function



Header = function()
	clear_screen
	print(char(10) + char(10) + "<size=60><color=red>    CONNECT <color=yellow>4")
	print("<color=#A0A0A0>                                  made by <color=#FFFFFF>marko")
	print(char(10) + char(10) + "            <color=#D2B48C><b>MAIN MENU" + char(10))
	print("            1  -  Single player")
	print("            2  -  Multiplayer")
	print("            3  -  Information")
	print("            4  -  Exit" + char(10))
end function

SP_Header = function()
	clear_screen
	print(char(10) + char(10) + "            <color=#D2B48C><b>SINGLE PLAYER" + char(10))
	print("            1  -  Player vs Computer")
	print("            2  -  2 players on one computer")
	print("            3  -  Return" + char(10))
end function

MP_Header = function()
	clear_screen
    print(char(10) + "            Game server: " + GameServer)
	print(char(10) + "            <color=#D2B48C><b>MULTIPLAYER" + char(10))
	print("            1  -  Host game")
	print("            2  -  Join game")
    print("            3  -  Browse games")
	print("            4  -  Return" + char(10))
end function

SP_AI_Header = function()
	clear_screen
	print(char(10) + char(10) + "            <color=#D2B48C><b>Player vs Computer" + char(10))
	print("            1  -  Easy")
	print("            2  -  Medium <color=red>>>> NOT WORKING <<<")
	print("            3  -  Hard <color=red>>>> NOT WORKING <<<")
	print("            4  -  Return" + char(10))
end function

Header

while true
	inputOk = false
	menu_choice = user_input("            Choice: ").to_int
	if typeof(menu_choice) != "number" or menu_choice > 4 or menu_choice < 1 then
		print("            Invalid choice!")
	else
		inputOk = true
	end if
	if inputOk then
		if menu_choice == 1 then
			SP_Header
			while true
				inputSP = false
				sp_choice = user_input("            Choice: ").to_int
				if typeof(sp_choice) != "number" or sp_choice > 3 or sp_choice < 1 then
					print("            Invalid choice!")
				else
					inputSP = true
				end if
				if inputSP then
					if sp_choice == 1 then
						SP_AI_Header
						while true
							inputSPAI = false
							spai_choice = user_input("            Choice: ").to_int
							if typeof(spai_choice) != "number" or spai_choice > 4 or spai_choice < 1 then
								print("            Invalid choice!")
							else
								inputSPAI = true
							end if
							if inputSPAI then
								if spai_choice == 1 then
									CreateBoard
									// Initialize the current player
									if round(rnd) == 1 then
										current_player = PLAYER_ONE
									else
										current_player = PLAYER_TWO
									end if
									// Warnings
									warn_incorrect = false
									warn_full = false
									
									// Play the game
									while true
										if not warn_incorrect and not warn_full then print_board()
										// Ask the current player to make a move
										if warn_incorrect and current_player == PLAYER_ONE then
											print(char(10) + "Invalid move, try again.")
											warn_incorrect= false
										end if
										if warn_full and current_player == PLAYER_ONE then
											print(char(10) + "Column is full, try again")
											warn_full = false
										end if
										if current_player == PLAYER_ONE then
											
											moveit = user_input(char(10) + "<indent=5%><size=20>" + current_player + "  enter a column number (1-" + COLS + "): ").to_int
											// Check if the move is valid
											if typeof(moveit) != "number" or (moveit - 1) < 0 or (moveit - 1) >= COLS then
       											warn_incorrect= true
        										continue
    										end if
											col = moveit - 1
										else
											moveit = round(rnd * 6)
											col = moveit
											wait(1)
										end if
										// Find the lowest empty row in the selected column
										row = null
    									for i in range(ROWS- 1 , 0)
        									if board[i][col] == " " then
            									row = i
            									break
        									end if
    									end for
    
    									if row == null then
        									warn_full = true
        									continue
    									end if
										
										// Place the player's symbol in the selected row and column
    									board[row][col] = current_player
										is_board_full = true
										for i in range(0, ROWS - 1)
											for j in range(0, COLS - 1)
												if board[i][j] == " " then
													is_board_full = false
													break
												end if
											end for
										end for
										
										// Check if the game is over
    									if check_winner(current_player) then
        									print_board()
											if current_player == PLAYER_ONE then
												winner = "Player"
											else
												winner = "Computer"
											end if
											wait(0.01)
        									print(char(10) + "<b><indent=5%><size=20>GAME OVER! " + winner + " with  </b>" + current_player + "  <b>wins!")
											user_input(char(10) + "<indent=5%>Press enter to continue...")
											break
    									else if is_board_full then
											print_board()
											wait(0.01)
        									print(char(10) + "<indent=5%><size=20>Tie game!")
											user_input(char(10) + "<indent=5%>Press enter to continue...")
											break
    									end if
										
										// Switch to the other player
										if current_player == PLAYER_ONE then
											current_player = PLAYER_TWO
										else
											current_player = PLAYER_ONE
										end if
									end while
									SP_Header
									break
								else if spai_choice == 2 then
									print("            <color=red>>>> NOT WORKING <<<")
								else if spai_choice == 3 then
									print("            <color=red>>>> NOT WORKING <<<")
								else
									SP_Header
									break
								end if
							end if
						end while
					else if sp_choice == 2 then
						CreateBoard
						// Initialize the current player
						current_player = PLAYER_ONE
						// Warnings
						warn_incorrect = false
						warn_full = false
						
						
						// Play the game
						while true
    						print_board()
    
   							// Ask the current player to make a move
							if warn_incorrect then
								print(char(10) + "Invalid move, try again.")
								warn_incorrect= false
							end if
							if warn_full then
								print(char(10) + "Column is full, try again")
								warn_full = false
							end if
    						moveit = user_input(char(10) + "<indent=5%><size=20>" + current_player + "  enter a column number (1-" + COLS + "): ").to_int
    
    						// Check if the move is valid
    						if typeof(moveit) != "number" or (moveit - 1) < 0 or (moveit - 1) >= COLS then
       							warn_incorrect= true
        						continue
    						end if
    						col = moveit - 1
    
    						// Find the lowest empty row in the selected column
    						row = null
    						for i in range(ROWS- 1 , 0)
        						if board[i][col] == " " then
            						row = i
            						break
        						end if
    						end for
    
    						if row == null then
        						warn_full = true
        						continue
    						end if
	
    						// Place the player's symbol in the selected row and column
    						board[row][col] = current_player
    
							is_board_full = true
							for i in range(0, ROWS - 1)
								for j in range(0, COLS - 1)
									if board[i][j] == " " then
										is_board_full = false
										break
									end if
								end for
							end for
	
    						// Check if the game is over
    						if check_winner(current_player) then
        						print_board()
								wait(0.01)
        						print(char(10) + "<b><indent=5%><size=20>GAME OVER! Player with </b>" + current_player + "  wins!")
								user_input(char(10) + "<indent=5%>Press enter to continue...")
								SP_Header
								break
    						else if is_board_full then
								print_board()
								wait(0.01)
        						print(char(10) + "<indent=5%><size=20>Tie game!")
								user_input(char(10) + "<indent=5%>Press enter to continue...")
								SP_Header
								break
    						end if
    						// Switch to the other player

							if current_player == PLAYER_ONE then
								current_player = PLAYER_TWO
							else
								current_player = PLAYER_ONE
							end if
						end while
					else
						Header
						break
					end if
				end if
			end while
		else if menu_choice == 2 then
			MP_Header
			while true
				inputMP = false
				mp_choice = user_input("            Choice: ").to_int
				if typeof(mp_choice) != "number" or mp_choice > 4 or mp_choice < 1 then
					print("            Invalid choice!")
				else
					inputMP = true
				end if
				if inputMP then
					if mp_choice == 1 then
						MP_Host()
					else if mp_choice == 2 then
						MP_Join()
					else if mp_choice == 3 then
						if not game_shell then GetGameShell
                        if typeof(game_shell) != "shell" then
                            print( char(10) + "            Unable to connect to game server!")
                            user_input(char(10) + "            Press enter to continue...")
                            MP_Header
                            break
                        end if
                        connectfourgame = game_shell.host_computer.File("/Games/Connect4")
                        continous = false
                        while true
                            clear_screen
                            print(char(10) + char(10) + "            Searching for availible games to join...")
                            wait(2)
                            listgames = []
                            listgametime = []
                            for game in connectfourgame.get_files
                                if game.is_binary then continue
                                if game.get_content.split(char(10)).len != 1 then continue
                                if game.get_content.split(char(10))[0].split(" -- ").len != 2 then continue
                                listgames.push(game.name)
                                listgametime.push(game.get_content.split(char(10))[0])
                            end for
                            if continous and listgames.len == 0 then continue
                            if listgames.len == 0 then
                                again = user_input(char(10) + char(10) + "            No games found. Refresh?" + char(10) + "            <b>y</b> - yes  /  <b>n</b> - no  /  <b>c</b> - continous: ")
                                if again.lower == "n" then
                                    break
                                else if again.lower == "c" then
                                    continous = true
                                end if
                            else
                                break
                            end if
                        end while
                        if listgames.len == 0 then
                            if again.lower != "n" then user_input(char(10) + "            Press enter to continue...")
                        else
                            print(char(10) + "            List of availible game(s):" + char(10))
                            output = ">>>>>>>>>>>><color=#A0A0A0>#</color> <color=#A0A0A0>GAME_ID</color> <color=#A0A0A0>HOST_NAME</color> <color=#A0A0A0>ACTIVE</color>"
                            for i in range(0, listgames.len - 1)
                                host_name = listgametime[i].split(" -- ")[0].trim
                                host_date = listgametime[i].split(" -- ")[1].trim
                                time_dif = calculate_time_difference(host_date, current_date)
                                gt_dif = time_dif * 4.21395
                                if gt_dif < 61 then time_color = "#98FB98"
                                if gt_dif > 60 and time_dif < 181 then time_color = "#FFFF33"
                                if gt_dif > 180 then time_color = "#CC0000"
                                active = convert_seconds(time_dif * 60)
                                active = active.replace(" ", "=")
                                output = output + char(10) + ">>>>>>>>>>>><color=#66FFFF>" + (i+1) + "</color> <color=#FFFFFF>" + listgames[i] + "</color> <color=#99FF33>" + host_name + "</color> <color=" + time_color + ">" + active + "</color>"
                            end for
                            formatted = format_columns(output)
                            formatted = formatted.replace("=", " ")
                            formatted = formatted.replace(">>>>>>>>>>>>", "            ")
                            print(formatted)
                            while true
                                inputok = false
                                choiceG = user_input(char(10) + "            Enter <color=#00FF00>e</color> to return or <color=#FF66FF>r</color> to refresh" + char(10) + "            Enter the number of game to join: ").to_int
                                if choiceG.lower =="e" then
                                    break
                                end if
								if choiceG.lower == "r" then
									CheckGames
									continue
								end if
                                if typeof(choiceG) != "number" or choiceG < 0 or choiceG > listgames.len then
                                    print("            Invalid choice!")
                                else
                                    inputok = true
                                end if
                                if inputok then
                                    MP_Join(listgames[choiceG-1])
                                    break
                                end if
                            end while
                        end if
                        MP_Header
                    else
						Header
						break
					end if
				end if
			end while
		else if menu_choice == 3 then
			clear_screen
			print(char(10)+char(10) + "            <color=#D2B48C><b>INFORMATION" + char(10))
			print("<indent=5%>The objective of the game is for a player to be the first to form a straight line of 4 tokens of their own color.")
			print("<indent=5%>The four tokens can be connected vertically, horizontally or diagonally." + char(10))
			print("<indent=5%>When arranging a multiplayer game, the hosting player can provide the game ID number to the joining player for the game to start, or the joining player can select the game from the 'Browse games' menu. " + char(10) + "<indent=5%>One player always 'hosts' the game, and the other one joins the game." + char(10))
			print("<indent=5%>When a multiplayer game is hosted, the second player has 30 seconds (or more if specified by hosting player) to connect or there will be a timeout. In multiplayer, the hosting player always starts first." + char(10))
            print("<indent=5%>When browsing a multiplayer game, the time under the ACTIVE column shows how long ago (in real life time) the game was hosted, and indicates the likelyhood of it still being active. The games with time colored red are most likely no longer availible." + char(10) + char(10))
			user_input("<indent=5%>Press enter to continue...")
			Header
		else
			exit(char(10) + "            Thank you for playing!" + char(10))
		end if
	end if
end while
