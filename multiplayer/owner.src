// The Server Owner Script.
//
// Sets up the server for allowing players to connect.
// Eventually, this may also set up the server in a full way.

ownerUsername = null
ownerPasswd = null


main = function()
    if params.len <= 0 or params.indexOf("-h") != null or params.indexOf("--help") != null then
        print("Usage: " + program_path + " [-h | --help] --config=file --user=username --pass=password")
        print("")
        print(" -h | --help          This help screen.")
        print(" --config=file        Configuration file for end-users of the game server.")
        print(" --user=username      Owner's Username to connect to the game server.")
        print(" --pass=password      Owner's Password for the user on the game server.")
        exit
    end if

    userConfigFile = null

    for param in params
        if param[:9] == "--config=" then
            userConfigFile = param[9:]
        else if param[:7] == "--user=" then
            globals.ownerUsername = param[7:]
        else if param[:7] == "--pass=" then
            globals.ownerPasswd = param[7:]
        else
            exit("Unknown parameter '" + param + "'")
        end if
    end for
    if userConfigFile == null or globals.ownerUsername == null or globals.ownerPasswd == null then
        exit("You must specify all the required parameters.  Use argument '--help' for details.")
    end if

    server = GameServer.LoadFrom(userConfigFile)
    if server == null then exit("Failed to connect to server.  Ensure it's running and your config file is correct.")
    res = server.Connect(globals.ownerUsername, globals.ownerPasswd)
    if res != null then exit("Failed to connect to server: " + res)

    // Set up the basic folders.  Order matters.
    server.mkHostDir(server.gameDir, false, globals.ownerUsername)
    server.mkHostDir(server.gameDir + "/Lobby", true, globals.ownerUsername)
    server.mkHostDir(server.gameDir + "/Games", false, globals.ownerUsername)
end function

// ---------------------------
// Cut-n-paste from lobby.gs
GameServer = {}
GameServer.LoadFrom = function(filename)
    file = get_shell.host_computer.File(filename)
    if file == null then file = get_shell.host_computer.File(current_path + "/" + filename)
    if file == null then file = get_shell.host_computer.File(home_dir + "/" + filename)
    if file == null then
        print("Could not find local file '" + filename + "'")
        return null
    end if
    props = ParsePropertyFile(file.get_content)
    addr = null
    username = "guest"
    passwd = "guest"
    port = 21
    service = "ftp"
    gameDir = "/home/guest"
    if props.hasIndex("ip") then addr = props.ip
    if props.hasIndex("username") then username = props.username
    if props.hasIndex("password") then passwd = props.password
    if props.hasIndex("port") then port = props.port
    if props.hasIndex("service") then service = props.service
    if props.hasIndex("dir") then gameDir = props.dir
    if addr == null then
        print("No 'ip' field set in the game property file '" + filename + "'")
        return null
    end if
    return GameServer.mk(addr, username, passwd, port, service, gameDir)
end function
GameServer.mk = function(addr, username, passwd, port, service, gameDir)
    ret = new GameServer
    // GameName The game's name, so that the player only interacts with people in the same game.
    ret.addr = addr
    ret.username = username
    ret.passwd = passwd
    if port isa string then port = port.to_int
    ret.port = port
    ret.service = service
    ret.gameDir = gameDir
    ret.server = null
    ret.queue = {}
    ret.sendId = {}
    ret.recvId = {}
    ret.knownGames = {}
    return ret
end function

// Connect Connect to the server.  Returns a string on error, and null on okay.
GameServer.Connect = function(user=null, passwd=null)
    if user == null then user = self.username
    if passwd == null then passwd = self.passwd
    if self.server == null then
        if self.addr == "localhost" then
            srv = get_shell
        else
            srv = get_shell.connect_service(self.addr, self.port, user, passwd, self.service)
        end if
        if srv isa string then
            return srv
        end if
        self.server = srv
    end if
    return null
end function

// ParsePropertyFile Parse the property file formatted contents.
ParsePropertyFile = function(contents)
    if contents == null then return {}
    ret = {}
    for line in contents.split(char(10))
        // Remove leading whitespace
        while line.len > 0 and line[0] == " "
            line = line[1:]
        end while
        if line.len <= 0 then continue
        if line[0] == "#" then continue
        pos = line.indexOf("=")
        if pos > 0 then
            ret[line[:pos]] = line[pos+1:]
        end if
    end for
    return ret
end function

// --------------
// Custom stuff on top of the game server.
GameServer.mkHostDir = function(path, otherWrite, owner)
    host = self.server.host_computer
    file = host.File(path)
    if file == null then
        pos = path.lastIndexOf("/")
        res = host.create_folder(path[:pos], path[pos+1:])
        if res isa string then exit("Failed to create directory '" + path + "' on server: " + res)
        file = host.File(path)
    end if
    if file == null or not file.is_folder then exit("Failed to create directory '" + path + "'")
    res = file.chmod("u+rwx")
    if res != "" and res != null then exit("Failed to update directory '" + path + "' user permissions: " + res)
    if otherWrite then
        if file.owner != self.username then file.set_owner(self.username)
        res = file.chmod("g+rwx")
        if res != "" and res != null then exit("Failed to update directory '" + path + "' group permissions: " + res)
        res = file.chmod("o+rwx")
        if res != "" and res != null then exit("Failed to update directory '" + path + "' other permissions: " + res)
    else
        if file.owner != owner then file.set_owner(owner)
        res = file.chmod("g+rx")
        if res != "" and res != null then exit("Failed to update directory '" + path + "' group permissions: " + res)
        res = file.chmod("g-w")
        if res != "" and res != null then exit("Failed to update directory '" + path + "' group permissions: " + res)
        res = file.chmod("o+rx")
        if res != "" and res != null then exit("Failed to update directory '" + path + "' other permissions: " + res)
        res = file.chmod("o-w")
        if res != "" and res != null then exit("Failed to update directory '" + path + "' other permissions: " + res)
    end if
end function

if locals == globals then main()
